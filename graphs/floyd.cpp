/*
УСЛОВИЕ
Полный ориентированный взвешенный граф задан матрицей смежности. Постройте 
матрицу кратчайших путей между его вершинами. Гарантируется, что в графе нет 
циклов отрицательного веса.
Входные данные
В первой строке вводится единственное число N (1≤N≤100) — количество вершин 
графа. В следующих N строках по N чисел задается матрица смежности графа 
(j-е число в i-й строке — вес ребра из вершины i в вершину j). Все числа по 
модулю не превышают 100. На главной диагонали матрицы — всегда нули.
Выходные данные
Выведите N строк по N чисел — матрицу расстояний между парами вершин, где j-е 
число в i-й строке равно весу кратчайшего пути из вершины i в j.
*/

#include <iostream>
#include <vector>
 
using namespace std;
 
int main() {
  int n;
  cin >> n;
  vector<vector<int>> g(n, vector<int>(n));
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) {
      cin >> g[i][j];
    }
  }
  for (int k = 0; k < n; ++k) {
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
        g[i][j] = min(g[i][j], g[i][k] + g[k][j]);
      }
    }
  }
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) {
      cout << g[i][j] << ' ';
    }
    cout << endl;
  }
}